

    
                    NEWZNAB Usenet Searching Web API 


                               v0.1
                             30/6/2010


Owner:  bb   at #newznab        (irc.synirc.org)   info@newznab.com
Author: ensi at #newznab        (irc.synirc.org)   ensisoft@gmail.com

1.  Introduction
2.  Functions
2.1 CAPS
2.2 SEARCH
2.3 INDIVIDUAL
3.  Predefined Categories

TODO:
  - tv-rage ??
  - authorization
  - error codes
  - standard category names?


1. Introduction
   
   This document describes the NEWZNAB Usenet Searching Web API. The API is designed for NZB aware client
   applications to perform searches to a particular NEWZNAB implementation using HTTP queries and receive
   matching search results and NZB data for downloading the material in question.
   
   This document does not describe the actual implementation of either the client or the server but just
   describes the HTTP interface and request/response sequences.

   Intended readers are server and client implementers.

1.1 Notation
    
    This document uses the follocation notations:
    
    Parameters: "t=c" denotes a required HTTP query parameter. [o=json | o=xml] denotes optional 
    parameters with possible values.


2. Functions
   
   All functions are executed as HTTP requests over TCP. All parameters are to be passed
   as query parmeters unless otherwise indicated. All returned XML/JSON data is UTF-8 encoded
   unless otherwise specified. All query parameters should be UTF-8 and URL encoded, i.e.
   query-param = URL-ENCODE( UTF8-ENCODE(param=value))
   

   2.1 CAPS

   Description: 
     CAPS function is used to query the server for supported features and the protocol version and other 
     meta data relevant to the implementation. This function doesn't require the client to provide any
     login information but can be executed out of "login session".

     Important fields of the returned data:
      server/version - the version of the protocol implemented by the server. All implementations         
                       should be backwards compatible. 
      caps/category  - Defines a searchable category which might have any number of subcategories.

   HTTP Method: 
     POST
      
   Parameters:  
     t=caps                    caps function
     [o=json | o=xml]          output format, either JSON or XML (default is XML)

   Responses:  
     200 OK
     404 Not Found

   Example:
     --> GET http://servername.com/api?t=c
     <-- 200 OK
        <?xml version="1.0" encoding="UTF-8"?>
          <caps>
            <server version="1.0" title="Newznab" strapline="A great usenet indexer" 
                    email="info@newznab.com" url="http://servername.com/" 
                    image="http://servername.com/theme/black/images/banner.jpg"/>

           <!-- supported categories -->
            <categories>
                <category id="1000" name="Console">
                  <subcat id="1010" name="NDS"/>
                  <subcat id="1020" name="PSP"/>
                </category>
                <category id="2000" name="Movies">
                  <subcat id="2010" name="DVD"/>
                </category>

                <!-- site specific categories -->
                <category id="8001" name="MotoGP"       description="Latest MotoGP stuff"/>
                <category id="8002" name="Fifa 2010"    description="Fifa 2010 world cup">
                  <subcat id="8003" name="Fifa 2010/HD" description="HD stuff"/>
                  <subcat id="8004" name="Fifa 2010/SD" description="SD stuff"/>
                </category>
                ...
            </categories>               

            <!-- TBD
                 - more searching options?
                 - tvrage?
                 - wild cards/regex?
                 - categories when searching, union vs. intersection?
            -->
          </caps>
        </xml>

   2.2 SEARCH
   
   Description:
      SEARCH function searches the index for items matching the search criteria. On succesful
      search the response contains a list of found items. Even if search matched nothing an empty
      response set is created and returned. This function requires passing the user credentials.
      
      Searches that include categories that are not supported by the server are still executed
      but the non-supported categories are simply skipped. This basically treats such a search
      simply as a "no match" but allows the same query to be ran simultaneously against several 
      servers. 
      
      The list of search categories specifies a logical OR condition. I.e. an item matching the 
      search input in any of the specified categories is considered a match and is returned. E.g.
      a search searching for "linux" in "computer" and "ebook" categories searches for matching
      items in "computer" and "ebook" but does not search for example the "movies" category.
      Items found in either group are then combined into a single result set. 
      
      When performing the query the categories to be searched are concatenated into a single 
      query parameter by , (comma). For example "cat=200,300,400", which is then URL encoded.
      
      The returned XML data stream is RSS 2.0 compliant and also contains additional information
      in the extra namespace.
      
      
   Important fields of the returned data (RSS):
     title           - title of the found item.
     pubdate         - the publishing date in RSS date object as specified by RFC822/2822. (not the Usenet date)
     link            - url for retrieving the NZB content.
     category        - the category the NZB belongs to.
     enclosure       - the NZB url

    HTTP Method:
      GET
      
    Parameters:
      t=search          search function, must always be "search"
      q=xxxx            search input (UTF-8/URL encoded)
      key=xxxx          user's key as provided by the service implementer
      
   Optional parameters:
      tvrage=x          include TVRage information, either "yes" or "no". Default is "no"
      limit=123         limit the number of returned items to this limit
      cat=xxx           list of categories to search delimeted by ","
      rid=xxxxx         tvrage id of the item being queried
      season=xxx        season string e.g. S01 or 1 for the item being queried
      ep=xxx]           episode string e.g. E13 or 13 for the item being queried
      o=xxx             output format, either "JSON" or "XML". Default is "XML".

    Response:
      200 OK
      403 Forbidden
      404 Not found

    Error Codes:
      xxx - Incorrect password or username
      xxx - account suspended
      xxx - insufficient priviledges

    Example:
      --> GET http://servername.com/api?t=search&key=xxxxx&q=a%20tv%20show
      <-- 200 OK
          <?xml version="1.0" encoding="UTF-8"?>
          <rss version="2.0">
          <channel>
            <item>        
              <!-- Standard RSS 2.0 Data -->
              <title>A.Tv.Show.S06E05.DVDRIP.XviD</title> 
              <guid isPermaLink="true">http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c</guid> 
              <link>http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c&amp;i=1&amp;r=18cf9f0a736041465e3bd521d00a90b9</link> 
              <comments>http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments</comments>  
              <pubDate>Sun, 06 Jun 2010 17:29:23 +0100</pubDate> 
              <category>TV > XviD</category>  
              <description>Some TV show</description>
              <enclosure url="http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c&amp;i=1&amp;r=18cf9f0a736041465e3bd521d00a90b9" length="154653309" type="application/x-nzb" /> 
    
              <!-- Additional attributes--> 
              <report:size>154653309</report:size>
              <report:categories>
                <report:category>5000</report:category>
                <report:category>5010</report:category>
                <report:category>5020</report:category>
              </report:categories>

              <!-- TVRage data -->
              <report:tv>
                <report:tvrageid>2638</report:tvrageid> 
                <report:seasonfull>S06E05</report:seasonfull> 
                <report:season>6</report:season> 
                <report:episode>5</report:episode> 
              </report:tv>                   
           </item>
         </channel>
         </rss>

          
      // no items matched the search criteria
      --> GET http://servername.com/api?t=search&key=xxxxx&q=linux%20image
      <-- 200 OK
          <?xml version="1.0" encoding="UTF-8"?>
          <rss>
            <channel/>
          </rss>

     // query could not be completed because of broken credentials
     --> GET http://servername.com/api?t=search&key=xxxxx&q=linux%20image
     <-- 403  Forbidden
         <?xml version="1.0" encoding="UTF-8"?>
         <error code="xxx" description="Incorrect password or username"/>


     // query could not be completed because it was malformed
     --> GET http://servername.com/api?t=search&key=xxxxx&q=linux%20image
     <-- 404 Not Found
         <?xml version="1.0" encoding="UTF-8"/>
         <error code="xxx" description="Missing parameter: key"/>

   2.3 INDIVIDUAL
   
   Description:
      INDIVIDUAL function returns all information known about an NZB.
      
      If a query is submitted which returns more than one result, then the first result found will be returned.
      i.e. only one <item> result will ever be returned.
      
    HTTP Method:
      GET
      
    Parameters:
      t=indiv      individual function
      id=xxxxx     optional - the guid of the item being queried
      rid=xxxxx    optional - the tvrage id of the item being queried
      season=xxx   optional - the season string e.g. S01 or 1 for the item being queried
      ep=xxx       optional - the episode string e.g. E13 or 13 for the item being queried
        key=xxxx     user's key as provided by the service implementer
      [o=json | o=xml]  output format, either JSON or XML (default is XML)

    Response:
      200 OK
      403 Forbidden
      404 Not found

    Example:
      --> GET http://servername.com/api?t=indiv&key=xxxxx&id=xxxxxxxxx
      <-- 200 OK
 <?xml version="1.0" encoding="UTF-8"?>
  <item> 
    <title>A.Tv.Show.S06E05.DVDRIP.XviD</title> 
    <guid isPermaLink="true">http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c</guid> 
    <link>http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c&amp;i=1&amp;r=18cf9f0a736041465e3bd521d00a90b9</link> 
    <comments>http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c#comments</comments>  
    <pubDate>Sun, 06 Jun 2010 17:29:23 +0100</pubDate> 
    <category>TV > XviD</category>  
    
    <description> 
    <![CDATA[>
    <ul> 
    <li>ID: <a href="http://servername.com/rss/viewnzb/e9c515e02346086e3a477a5436d7bc8c">e9c515e02346086e3a477a5436d7bc8c</a> (Size: 147.49 MB) </li> 
    <li>Name: A.Tv.Show.S06E05.DVDRIP.XviD</li> 
    <li>Attributes: Category - TV > XviD </li> 
    <li>Groups: </li> 
    <li>Poster: teevee@4u.tv (teevee)</li> 
    <li>PostDate: Sun, 06 Jun 2010 16:16:17 +0100</li> 
    </ul>]]>
    </description> 
    
    <enclosure url="http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c&amp;i=1&amp;r=18cf9f0a736041465e3bd521d00a90b9" length="154653309" type="application/x-nzb" /> 
    
    <!-- Additional attributes--> 
    <report:id>e9c515e02346086e3a477a5436d7bc8c</report:id> 
    <report:category parentID="" id="25">TV > XviD</report:category> 
    <report:groups> 
      <report:group></report:group> 
    </report:groups> 
    <report:tv> 
      <report:tvrageid>2638</report:tvrageid> 
      <report:seasonfull>S06E05</report:seasonfull> 
      <report:season>6</report:season> 
      <report:episode>5</report:episode> 
    </report:tv> 
    <report:nzb>http://servername.com/rss/nzb/e9c515e02346086e3a477a5436d7bc8c</report:nzb> 
    <report:poster><![CDATA[teevee@4u.tv (teevee)]]></report:poster> 
    <report:size type="bytes">154653309</report:size> 
    <report:postdate>Sun, 06 Jun 2010 16:16:17 +0100</report:postdate> 
    <report:stats> 
      <report:views>0</report:views> 
      <report:comments>0</report:comments> 
    </report:stats>    
 </item>

            
3. Predefined Categories
   
   In order to facilitate operation that does not rely on a particular natural language, e.g. english
   a set of predefined catetegory IDs have been defined. It is possible to define custom categories 
   in the custom category range. Each category is given a range for a set of subcategories. It is possible
   for an item to belong to several categories at the same time.

   Numeric Category range               Category Name                   Comments

   1000-1999                            Console
   2000-2999                            Movies
   3000-3999                            Audio
   4000-4999                            PC
   5000-5999                            TV
   6000-6999                            XXX
   7000-7999                            Other
   8000-9999                            Site Specific                   Site specific category range. Defined in CAPS

   Subcategories                        Category Name

   1010                                 Console/NDS                     
   1020                                 Console/PSP
   1030                                 Console/Wii
   1040                                 Console/XBox
   1050                                 Console/Xb0x 360
   2010                                 Movies/DVD
   2020                                 Movies/WMV-HD
   2030                                 Movies/XViD
   2040                                 Movies/x264                     HD movies with AVC encoding
   3010                                 Audio/MP3
   3020                                 Audio/Video                     Music videos
   3030                                 Audio/Audiobook                 wtf is an audiobook?
   3040                                 Audio/Lossless
   4010                                 PC/0day                         0-day?
   4020                                 PC/ISO                          CD-ROM images/DVD Images
   4030                                 PC/Mac                          
   5010                                 TV/DVD                          TV Series on DVD
   5020                                 TV/SWE                          Swedish TV
   5030                                 TV/XviD
   5040                                 TV/x264                         HD TV with AVC encoding
   5050                                 TV/iPod
   5060                                 TV/Sport                        
   6010                                 XXX/DVD                                 
   6020                                 XXX/WMV
   6030                                 XXX/XviD
   6040                                 XXX/x264                        HD Pron.
   6050                                 XXX/Lesbians                    
   6051                                 XXX/Midgets                     
   7010                                 Misc
   7020                                 EBook                           E-Books

   8000-9999                            Site specific                   Specific to a site.
